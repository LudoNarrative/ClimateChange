/*
(Requires HANson to parse due to comments)

Test specs used for the visualization tool to make sure different things are working
*/

[
{
	"id": "test1",
	"characters": {
		"test1" : {"name": "Test1", "nickname": "McTesterson", "gender": "female" }
	},
	"wishlist": [
		{ "condition": "test1Con eq true"},
		{ "condition": "test2Con eq true"}
	],
	"startState": [
		"set test1Con false"
	],
	"UIvars": [],
	"mode": { 
		"type": "narration"				//can be "narration", "dialogue", or "monologue"
	},
	"dataFile": [
		{
			"id": "test1_beginning",
			"speaker" : "test1",
			"content": "Just testing the barest minimum of an example.",
			"choices": [
				{"gotoId": "test1_end", "speaker": "Test1"},
			],
			"effects": ["set test1Con true"]
		},
		{
			"id": "test1_end",
			"speaker" : "Test1",
			"choiceLabel": "Testing, testing, 123.",
			"content": "Here's the second node doop de doo.",
			"effects": ["set test2Con true"]
		}
	]
},
{
	//tests whether nodes are grouping correctly
	"id": "test2",
	"characters": {
		"test1" : {"name": "Test1", "nickname": "McTesterson", "gender": "female" }
	},
	"wishlist": [
		{ "condition": "test1Con eq true"},
		{ "condition": "test2Con eq true"}
	],
	"startState": [
		"set test1Con false"
	],
	"UIvars": [],
	"mode": { 
		"type": "narration"				//can be "narration", "dialogue", or "monologue"
	},
	"dataFile": [
		{
			"id": "test2_beginning",
			"speaker" : "Test1",
			"content": "Just testing the barest minimum of an example.",
			"choices": [
				{"gotoId": "test2_change1", "speaker": "Test1"},
				{"gotoId": "test2_change2", "speaker": "Test2"},
			],
			"effects": ["set test1Con true"]
		},
		{
			"id": "test2_change1",
			"speaker" : "Test1",
			"choiceLabel": "I am choice id test2_change1.",
			"content": "Here's the test2_change1 node doop de doo."
			//"effects": ["set test2Con true"]
		},
		{
			"id": "test2_change2",
			"speaker" : "Test1",
			"choiceLabel": "I am choice id test2_change2",
			"content": "Here's the test2_change2 node doop de doo.",
			"effects": ["set droppedKnowledge 2"]
		},
		{
			"id": "test2_end",
			"speaker" : "Test1",
			"content": "Here's the test2_end node doop de doo.",
			"conditions" : ["test1Con eq true"],
			"effects": ["set test2Con true"]
		}
	]
},
//tests global grammars firing correctly
{
	"id": "test3",
	"characters": {
		"test1" : {"name": "Test1", "nickname": "McTesterson", "gender": "female" }
	},
	"wishlist": [
		{ "condition": "test1Con eq true"},
		{ "condition": "test2Con eq true"}
	],
	"startState": [
		"set test1Con false"
	],
	"UIvars": [],
	"mode": { 
		"type": "narration"				//can be "narration", "dialogue", or "monologue"
	},
	"dataFile": [
		{
			"id": "test1_beginning",
			"speaker" : "test1",
			"content": "Just testing the barest minimum of an example.",
			"choices": [
				{"gotoId": "test1_end", "speaker": "Test1"},
			],
			"effects": ["set test1Con true"]
		},
		{
			"id": "test1_end",
			"speaker" : "Test1",
			"choiceLabel": "Testing, testing, 123.",
			"content": "Here's the second node doop de doo.",
			"effects": ["set test2Con true"]
		}
	]
},
]