clingo version 4.5.4
Reading from generation_rules.lp ...
Solving...
Answer: 1
entity(e1) singular(e1) entity(e2) many(e2)
precondition(control_event(click(e1)),o1) result(o1,add(e2))
precondition(control_event(click(e2)),o2) result(o2,delete(e2))
less_than(0,low) less_than(low,medium) less_than(medium,high)
oppositeSides(screen_top,screen_bottom)
oppositeSides(screen_left,screen_right) goodResult(mode_change(game_win))
badResult(mode_change(game_end)) badResult(mode_change(game_loss))
unrestrictedCondition(tick) screen(screen_top) screen(screen_left)
screen(screen_bottom) screen(screen_right) timingBasedPhysics(spring)
timingBasedPhysics(pendulum) timingBasedPhysics(chase)
timingBasedPhysics(random) timingBasedPhysics(random_chase)
timingBasedPhysics(flee) timingBasedPhysics(random_flee) threshold(0)
threshold(mid) threshold(high) threshold(low) effect(add(e2))
effect(delete(e2)) condition(control_event(click(e1)))
condition(control_event(click(e2))) less_than(0,medium) less_than(low,high)
less_than(0,high) less_than_or_equal(0,low) less_than_or_equal(low,medium)
less_than_or_equal(medium,high) less_than_or_equal(0,medium)
less_than_or_equal(low,high) less_than_or_equal(0,high) greater_than(low,0)
greater_than(medium,low) greater_than(high,medium) greater_than(medium,0)
greater_than(high,low) greater_than(high,0) greater_than_or_equal(low,0)
greater_than_or_equal(medium,low) greater_than_or_equal(high,medium)
greater_than_or_equal(medium,0) greater_than_or_equal(high,low)
greater_than_or_equal(high,0) learnedCondition(control_event(click(e1)))
learnedCondition(control_event(click(e2)))
implies(control_event(click(e1)),control_event(click(e1)))
implies(control_event(click(e2)),control_event(click(e2)))
implies(control_event(click(e1)),present(e1))
implies(control_event(click(e2)),present(e2)) learnedCondition(present(e1))
learnedCondition(present(e2)) negates(delete(e2),present(e2))
inhibits(delete(e2),control_event(click(e2))) result_hinders(delete(e2),o2)
notImmediatelyRepeatable(o2) requires(o1,e1) requires(o2,e2)
outcome_enablesN(o1,add(e2),0) outcome_enablesN(o2,delete(e2),0)
outcome_enables(o1,add(e2)) outcome_enables(o2,delete(e2)) enables(o1,o2)
outcome(o1) outcome(o2) onlyOnePrecondition(o1) onlyOnePrecondition(o2)
oppositeSides(screen_bottom,screen_top)
oppositeSides(screen_right,screen_left)
conditionEnablesN(control_event(click(e1)),o1,0)
conditionEnablesN(control_event(click(e2)),o2,0)
conditionEnablesN(control_event(click(e1)),o2,1)
conditionEnables(control_event(click(e1)),o1)
conditionEnables(control_event(click(e2)),o2)
conditionEnables(control_event(click(e1)),o2)
playerCreatesCondition(control_event(click(e1)))
playerCreatesCondition(control_event(click(e2)))
contradictory(present(e1),absent(e1)) contradictory(present(e2),absent(e2))
contradictory(control_event(click(e1)),absent(e1))
contradictory(control_event(click(e2)),absent(e2))
contradictory(absent(e1),present(e1)) contradictory(absent(e2),present(e2))
contradictory(absent(e1),control_event(click(e1)))
contradictory(absent(e2),control_event(click(e2))) restrictedEntity(e1)
restrictedEntity(e2) restricted(o1) restricted(o2) playerInfluences(o1)
playerInfluences(o2) playerDetermines(o1) playerDetermines(o2) required(e1)
required(e2) completeOutcome(o1) completeOutcome(o2) outcomes(2)
playerControls results(2) preconditions(2) maintains_singular(o2,e2)
reachableCondition(control_event(click(e1)))
reachableCondition(control_event(click(e2))) reachableOutcome(o1)
reachableOutcome(o2) reachableResult(add(e2)) reachableResult(delete(e2))
controlled(o1) controlled(o2)
shared_precondition(control_event(click(e1)),o1,o1)
shared_precondition(control_event(click(e2)),o2,o2) differentiated(o1)
differentiated(o2) Optimization: 2 OPTIMUM FOUND

Models       : 1     
  Optimum    : yes
Optimization : 2
Calls        : 1
Time         : 0.066s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.060s
